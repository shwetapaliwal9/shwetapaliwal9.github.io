{"version":3,"sources":["Store/configStore.js","serviceWorker.js","Home/mapDispatchToProp.js","Home/mapStateToProp.js","Home/Home.js","Details/mapDispatchToProps.js","Details/mapStateToProps.js","Loader/Loader.js","Details/Details.js","Listing/mapDispatchToProp.js","Listing/mapStateToProp.js","Helper/addIdToLs.js","Helper/removeIdFromLs.js","Listing/Listing.js","Header/Header.js","Reviews/mapDispatchToProps.js","Reviews/mapStateToProps.js","Reviews/Reviews.js","AppRouter.js","index.js"],"names":["likedRestaurantsInLS","localStorage","getItem","defaultState","cities","restaurantsList","restaurants","results_found","results_start","results_shown","restaurantDetails","restaurantReviews","user_reviews","review_count","review_shown","review_start","totalReviews","totalUser_reviews","totalReview_count","totalReview_shown","totalReview_start","likedRestaurants","JSON","parse","store","createStore","state","arguments","length","undefined","action","restaurantsArrayInState","likedRestaurantsID","type","restaurantsArray","Object","toConsumableArray","concat","data","forEach","element","restId","restaurant","R","res_id","isLiked","indexOf","objectSpread","restaurantData","reviews_count","reviews_start","reviews_shown","indexOfId","splice","applyMiddleware","thunk","Boolean","window","location","hostname","match","mapDispatchToProp","dispatch","updateName","name","mapStateToProp","Home","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickHandler","bind","assertThisInitialized","_this2","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","getCityData","_this3","superagent","get","set","then","res","city","body","location_suggestions","cityId","id","history","push","_this4","_this5","map","cityName","index","react_default","a","createElement","key","onClick","className","class","Component","src_Home_Home","withRouter","connect","mapStateToProps","getRestaurantDetails","getRestaurantReviews","details","reviews","Loader","Details","scrollTo","params","parseInt","src_Loader_Loader","reviewData","reviewCount","imageURL","restaurant_Name","restaurant_Rating","restaurant_Votes","restaurant_locality","restaurant_address","restaurant_cuisine","rate_for_2","currency","review","user_image","user_name","rating","review_text","unfilledStar","arr","i","src","Link","to","getRestaurantsData","start","count","console","log","addToLiked","removeFromLiked","result_start","result_found","result_shown","addLikedinLS","likedIdInLS","setItem","stringify","likedIds","removeLikedinLS","Listing","loadMoreResult","intersectionCallback","likeHandler","unLikeHandler","observer","IntersectionObserver","rootMargin","threshold","target","document","querySelector","observe","entries","intersectionRatio","e","preventDefault","stopPropagation","restaurantList","Header","href","getAllRestaurantReviews","Reviews","allReviewData","total_reviews","AppRouter","BrowserRouter","src_Header_Header","Route","path","exact","component","ReactDOM","render","es","src_AppRouter","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66580dbf.chunk.js","sourcesContent":["import {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\n\nlet likedRestaurantsInLS = localStorage.getItem('likedRestaurants');\n\nif (likedRestaurantsInLS) {\n    likedRestaurantsInLS = JSON.parse(likedRestaurantsInLS);\n} else {\n    likedRestaurantsInLS = [];\n}\n\nconst defaultState = {\n    cities:[\"Bengaluru\", \"Delhi\",\"Pune\",\"Mumbai\",\"Hyderabad\"],\n    restaurantsList: {\n        restaurants: [],\n        results_found: 0,\n        results_start: 0,\n        results_shown: 0,\n    },\n    restaurantDetails:null,\n    restaurantReviews:{\n        user_reviews:[],\n        review_count:0,\n        review_shown:0,\n        review_start:0\n    },\n    totalReviews:{\n        totalUser_reviews:[],\n        totalReview_count:0,\n        totalReview_shown:0,\n        totalReview_start:0\n    },\n    likedRestaurants: likedRestaurantsInLS\n}\n\nfunction newState(state=defaultState, action){\n    let restaurantsArrayInState = [];\n    let likedRestaurantsID  = [];\n    switch(action.type){\n        case 'RESTAURANTS_LIST_FETCHED':\n        let restaurantsArray = [...state.restaurantsList.restaurants, ...action.data.restaurants];\n        restaurantsArray.forEach(element => {\n            const restId = element.restaurant.R.res_id;\n            let isLiked = false;\n    \n            if (state.likedRestaurants.indexOf(restId) >= 0) {\n                isLiked = true;\n            }\n            \n            element.isLiked = isLiked;\n            });\n\n        return{\n            ...state,\n            restaurantsList: {\n                restaurants: restaurantsArray,\n                results_found: action.data.results_found,\n                results_start: action.data.results_start,\n                results_shown: action.data.results_shown\n            },\n            restaurantDetails:null,\n            restaurantReviews:defaultState.restaurantReviews\n        }\n        case 'RESTAURANT_DETAILS_FETCHED':\n        const restaurantData = action.data;\n   \n        if (state.likedRestaurants.indexOf(restaurantData.R.res_id) >=0) {\n            restaurantData.isLiked = true;\n        } else {\n            restaurantData.isLiked = false;\n        }\n\n        return{\n            ...state,\n            restaurantDetails: restaurantData,\n            totalReviews:defaultState.totalReviews\n        }\n        case 'RESTAURANT_REVIEWS_FETCHED':\n        return{\n            ...state,\n            restaurantReviews:{\n                user_reviews: action.data.user_reviews,\n                review_count: action.data.reviews_count,\n                review_start: action.data.reviews_start,\n                review_shown: action.data.reviews_shown,\n            }\n        }\n        case 'RESTAURANT_TOTAL_REVIEWS_FETCHED':\n        return{\n            ...state,\n            totalReviews:{\n                totalUser_reviews: action.data.user_reviews,\n                totalReview_count: action.data.reviews_count,\n                totalReview_shown: action.data.reviews_start,\n                totalReview_start: action.data.reviews_shown,\n            }\n        }\n        case 'ADD_TO_LIKED': \n        restaurantsArrayInState = [...state.restaurantsList.restaurants];\n        likedRestaurantsID = state.likedRestaurants;\n\n        if (state.likedRestaurants.indexOf(action.data < 0)) {\n            likedRestaurantsID = [...likedRestaurantsID, action.data];\n        }\n    \n        restaurantsArrayInState.forEach(element => {\n        const restId = element.restaurant.R.res_id;\n        let isLiked = false;\n\n        if (likedRestaurantsID.indexOf(restId) >= 0) {\n            isLiked = true;\n        }\n        \n        element.isLiked = isLiked;\n        });\n\n        return{\n            ...state,\n            restaurantsList: {\n                ...state.restaurantsList,\n                restaurants: restaurantsArrayInState\n            },\n            likedRestaurants: likedRestaurantsID\n        }\n\n        case 'REMOVE_FROM_LIKED':\n            restaurantsArrayInState = [...state.restaurantsList.restaurants];\n            likedRestaurantsID = [...state.likedRestaurants];\n            const indexOfId = state.likedRestaurants.indexOf(action.data);     \n            if ( indexOfId >= 0) {\n                likedRestaurantsID.splice(indexOfId, 1);\n\n                restaurantsArrayInState.forEach(element => {\n                    const restId = element.restaurant.R.res_id;\n                    let isLiked = false;\n        \n                    if (likedRestaurantsID.indexOf(restId) >= 0) {\n                        isLiked = true;\n                    }\n                    \n                    element.isLiked = isLiked;\n                });\n\n                return{\n                    ...state,\n                    restaurantsList: {\n                        ...state.restaurantsList,\n                        restaurants: restaurantsArrayInState\n                    },\n                    likedRestaurants: likedRestaurantsID\n                }\n            }\n\n            return state;\n\n        default:\n            return state\n    }\n        \n}\n\nconst store = createStore(newState, applyMiddleware(thunk));\nexport default store","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const mapDispatchToProp = dispatch => ({\n    updateName(name){\n        dispatch({\n            type:\"name-type\",\n            data:name\n        })\n    }\n    \n})\nexport default mapDispatchToProp","const mapStateToProp = state => {\n    return {\n        cities:state.cities\n    };\n}\nexport default mapStateToProp","import React,{Component} from 'react';\nimport { connect } from 'react-redux';\nimport mapDispatchToProp from './mapDispatchToProp';\nimport mapStateToProps from './mapStateToProp';\nimport { withRouter} from 'react-router-dom';\nimport superagent from \"superagent\";\nimport \"./Home.css\"\nclass Home extends Component{\n    constructor(props){\n        super(props);\n        this.onClickHandler = this.onClickHandler.bind(this);\n    }\n    componentDidMount(){\n        if (\"geolocation\" in navigator){\n            navigator.geolocation.getCurrentPosition((position)=>{\n                debugger;\n                const lat = position.coords.latitude;\n                const lon = position.coords.longitude;\n                if(lat && lon){\n                    this.getCityData(lat, lon);\n                }\n            })\n        }\n    }\n    \n    getCityData(lat, lon){\n        superagent\n        .get(`https://developers.zomato.com/api/v2.1/cities?lat=${lat}&lon=${lon}`)\n        .set('user-key',\"fa81a3f97323eba13d8713d3284b8556\")\n        .then(res =>{\n            const city = res.body.location_suggestions[0].name;\n            const cityId = res.body.location_suggestions[0].id;\n            this.props.history.push(`/listing/${city}/${cityId}`);\n            //window.location.href = `/listing/${city}/${cityId}`;\n        });\n    }\n    \n    onClickHandler(city){\n        superagent\n            .get(`https://developers.zomato.com/api/v2.1/cities?q=${city}`)\n            .set('user-key',\"fa81a3f97323eba13d8713d3284b8556\")\n            .then(res =>{\n                const cityId = res.body.location_suggestions[0].id;\n                this.props.history.push(`/listing/${city}/${cityId}`);\n                //window.location.href = `/listing/${city}/${cityId}`;\n            });\n    }\n    render(){\n        const city = this.props.cities.map((cityName,index)=>{\n            return (\n                <li key={index} onClick={() => this.onClickHandler(cityName)}>\n                    <button className='btn'>{cityName}</button>\n                </li>\n            )\n        });\n        return(\n            <div class='container'>\n            <div className='cityList-container container'>\n            <h3 className='heading'>Select your City</h3>\n                <ul className=\"cityList\">\n                   {city}\n                </ul>\n            </div>\n               \n            </div>\n            \n        );\n    }\n}\nexport default withRouter(connect(mapStateToProps, mapDispatchToProp)(Home))","import superagent from \"superagent\";\n\nconst mapDispatchToProp = dispatch => ({\n    getRestaurantDetails(id){\n        dispatch(function(dispatch){\n            superagent\n                .get(`https://developers.zomato.com/api/v2.1/restaurant?res_id=${id}`)\n                .set(\"user-key\",'fa81a3f97323eba13d8713d3284b8556')\n                .then(res =>{\n                    dispatch({\n                        type:'RESTAURANT_DETAILS_FETCHED',\n                        data:res.body\n                    });\n                });\n        })\n    },\n    getRestaurantReviews(id){\n        dispatch(function(dispatch){\n            superagent\n                .get(`https://developers.zomato.com/api/v2.1/reviews?res_id=${id}&count=10&start=20`)\n                .set(\"user-key\",'fa81a3f97323eba13d8713d3284b8556')\n                .then(res => {\n                    dispatch({\n                        type:'RESTAURANT_REVIEWS_FETCHED',\n                        data:res.body\n                    });\n                });\n        });\n    }\n    \n})\nexport default mapDispatchToProp","import { get } from 'lodash';\n\nconst mapStateToProp = state => {\n    return {\n        details: state.restaurantDetails,\n        reviews: get(state.restaurantReviews, \"user_reviews\"),\n        review_count: state.restaurantReviews.review_count,\n        review_start: state.restaurantReviews.review_start,\n        review_shown: state.restaurantReviews.review_shown,\n    };\n}\n\nexport default mapStateToProp;","import React from 'react';\nimport './Loader.css';\n\nconst Loader = ()=>{\n    return(\n        <div>\n            <div className='spinner'></div>\n        </div>\n    )\n}\nexport default Loader\n\n","import React,{Component} from 'react';\nimport { connect } from 'react-redux';\nimport mapDispatchToProp from './mapDispatchToProps';\nimport mapStateToProps from './mapStateToProps';\nimport { get } from 'lodash';\nimport './Details.css';\nimport { withRouter} from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport Loader from '../Loader/Loader';\n\nclass Details extends Component{\n    componentDidMount() {\n        window.scrollTo(0,0);\n        const restId = this.props.match.params.restId;\n        this.props.getRestaurantDetails(parseInt(restId, 10));\n        this.props.getRestaurantReviews(parseInt(restId, 10));\n    }\n\n    render(){\n        if (!this.props.details) {\n            return <Loader/>\n        }\n        \n        const restId = this.props.match.params.restId;\n        let data = this.props.details;\n        let reviewData = this.props.reviews;\n        let reviewCount = this.props.review_count;\n        \n        const imageURL = get(data, \"featured_image\");\n        const restaurant_Name = get(data, \"name\");\n        const restaurant_Rating = get(data, \"user_rating.aggregate_rating\");\n        const restaurant_Votes = get(data, \"user_rating.votes\");\n        const review_Count = get(reviewCount,\"review_count\");\n        const restaurant_locality = get(data, \"location.locality_verbose\");\n        const restaurant_address = get(data, \"location.address\");\n        const restaurant_cuisine= get(data, \"cuisines\");\n        const rate_for_2 = get(data,\"average_cost_for_two\");\n        const currency = get(data, \"currency\");\n            \n        let user_reviews = reviewData.map((review,index)=>{\n            const user_image = get(review,\"review.user.profile_image\");\n            const user_name = get(review,\"review.user.name\");\n            const rating = get(review,\"review.rating\");\n            const review_text = get(review,\"review.review_text\");\n            const maxRating = 5;\n            const unfilledStar = maxRating - rating;\n            let arr = [];\n                for (var i = 0; i < rating; i++) {\n                    arr.push(<i class=\"fas fa-star\"></i>);\n                }\n                for(var i = 0; i<unfilledStar; i++){\n                    arr.push(<i class=\"far fa-star\"></i>);\n                }\n            return(\n                <li key={index}>\n                    <img className='user-image' src={user_image}/>\n                    <div className='reviews-info'>\n                        <h4 className='user-name'>{user_name}</h4>\n                        <span className='stars'>{arr}</span>\n                        <p className='review-text'>{review_text}</p>\n                    </div>\n                    \n                </li>\n            )\n        }) ;\n        return(\n            <div className='container resto-details-ctn' key={restId}>\n               <img className=\"details-img\" src={imageURL}/>\n               <div className='resto-info'>\n                   <h4 className='resto-name'>\n                        {restaurant_Name}\n                   </h4>\n                   {this.props.details.isLiked && (\n                        <div>\n                            <i class=\"details-liked fas fa-heart\"></i>\n                            <span className=\"likedText\">Liked</span>\n                        </div>    \n                    )}\n                   <div className='rating-info'>\n                        <span className='resto-rating'>\n                            <span class='stars'><i className=\"fas fa-star\"></i></span>\n                            {restaurant_Rating}\n                        </span>\n                        <span className='resto-vote'>({restaurant_Votes}) votes</span>\n                        <span className='review-count'>{reviewCount} Reviews</span>\n                    </div>\n\n                    <div className='cuisine-info'>\n                        <span className='cuisine-items'>{restaurant_cuisine}</span>\n                        <span className='cost'>{currency}{rate_for_2} for two</span>\n                    </div>\n\n                   <button className='share-btn'><i class=\"fas fa-share\"></i>  Share</button>\n\n                   <div className='resto-address'>  \n                        <div class='info'>\n                            {restaurant_locality} \n                        </div>\n                        <div class='a-info'>\n                            {restaurant_address}\n                        </div>\n                    </div>\n                    <div className='btn-section'>\n                        <button className='btn'>\n                            <span class='btn-icon'><i class=\"fas fa-camera\"></i></span>\n                            Photos\n                        </button>\n                        <button className='btn'>\n                            <span class='btn-icon'><i class=\"fas fa-utensils\"></i></span>\n                            Menu\n                        </button>\n                    </div>\n                    <div className='reviews'>\n                            <h4 className='head'>Ratings:</h4>\n                            <ul>\n                                {user_reviews}\n                            </ul>\n                            <div>\n                                <Link to={`/Reviews/${restId}`}>\n                                    <button className='more-btn'><i class=\"fas fa-pen\"></i>  More reviews...</button>\n                                </Link>\n                                \n                            </div>\n                    </div>\n               </div>\n            </div>\n            \n        );\n    }\n}\nexport default withRouter(connect(mapStateToProps, mapDispatchToProp)(Details))","import superagent from \"superagent\";\n\n\nconst mapDispatchToProp = dispatch => ({\n    getRestaurantsData(start,count, id){\n        dispatch(function(dispatch){\n\n            superagent\n                .get(`https://developers.zomato.com/api/v2.1/search?entity_id=${id}&entity_type=city&start=${start}&count=${count}`)\n                .set('user-key', 'fa81a3f97323eba13d8713d3284b8556')\n                .then(res => {\n                    console.log(res);\n                    dispatch({\n                        type:'RESTAURANTS_LIST_FETCHED',\n                        data:res.body\n                    })    \n                     debugger;   \n                });    \n\n           \n        })\n    },\n    addToLiked(id){\n        dispatch({\n            type: \"ADD_TO_LIKED\",\n            data: id\n        })\n    },\n\n    removeFromLiked(id){\n        dispatch({\n            type: \"REMOVE_FROM_LIKED\",\n            data: id\n        })\n    }\n    \n})\nexport default mapDispatchToProp","import {get} from 'lodash';\n\nconst mapStateToProp = state => {\n    return {\n        restaurants:get(state.restaurantsList, 'restaurants',[]),\n        result_start: get(state.restaurantsList, \"results_start\"),\n        result_found: get(state.restaurantsList, \"results_found\"),\n        result_shown: get(state.restaurantsList, \"results_shown\")\n    };\n}\nexport default mapStateToProp","function addLikedinLS(id){\n    console.log(id);\n    debugger;\n    let likedIdInLS = localStorage.getItem('likedRestaurants');\n    if (likedIdInLS) {\n        likedIdInLS = JSON.parse(likedIdInLS);\n        if (likedIdInLS.indexOf(id) < 0) {\n            likedIdInLS.push(id);\n            localStorage.setItem('likedRestaurants', JSON.stringify(likedIdInLS));\n        }\n    } else {\n        var likedIds = [id];\n        localStorage.setItem('likedRestaurants', JSON.stringify(likedIds));\n    }\n}\n\nexport default addLikedinLS;","function removeLikedinLS(id){\n    console.log(id);\n    let likedIdInLS = localStorage.getItem('likedRestaurants');\n    if (likedIdInLS) {\n        likedIdInLS = JSON.parse(likedIdInLS);\n        const indexOfId = likedIdInLS.indexOf(id);\n        if (indexOfId >= 0) {\n            likedIdInLS.splice(indexOfId, 1);    \n            localStorage.setItem('likedRestaurants', JSON.stringify(likedIdInLS));\n        }\n    }\n}\n\nexport default removeLikedinLS;","import React,{Component} from 'react';\nimport { connect } from 'react-redux';\nimport mapDispatchToProp from './mapDispatchToProp';\nimport mapStateToProps from './mapStateToProp';\nimport './Listing.css'\nimport { get } from 'lodash';\nimport { withRouter} from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport Loader from '../Loader/Loader.js'\nimport addLikedinLS from '../Helper/addIdToLs.js';\nimport removeLikedinLS from '../Helper/removeIdFromLs.js';\n\nconst count = 10;\nclass Listing extends Component{\n    constructor(props){\n        super(props);\n        this.loadMoreResult = this.loadMoreResult.bind(this);\n        this.intersectionCallback = this.intersectionCallback.bind(this);\n        this.likeHandler = this.likeHandler.bind(this);\n        this.unLikeHandler = this.unLikeHandler.bind(this);\n    }\n\n    componentDidMount() {\n        const cityId = this.props.match.params.cityId;\n        this.props.getRestaurantsData(0,count, parseInt(cityId, 10));\n        // config that define root margin and threshlod \n        const options = {\n            rootMargin: '200px',\n            threshold: .5\n        }\n        // this creates a observer;  \n        const observer = new IntersectionObserver(this.intersectionCallback, options);\n        \n        const target = document.querySelector('#listMoreLoader');\n        observer.observe(target);\n    }\n   \n    intersectionCallback(entries){\n        if (entries[0].intersectionRatio > 0) {\n            this.loadMoreResult();\n        }\n    }\n\n    loadMoreResult(){\n        const start = this.props.result_start + this.props.result_shown;\n        if(this.props.result_found > start){\n            this.props.getRestaurantsData(start,count);\n        }\n    }\n\n    likeHandler(e,id){\n        e.preventDefault();\n        e.stopPropagation();\n        addLikedinLS(id);\n        this.props.addToLiked(id);\n    }\n\n    unLikeHandler(e, id) {\n        e.preventDefault();\n        e.stopPropagation();\n        removeLikedinLS(id);\n        this.props.removeFromLiked(id);\n    }\n\n    render(){\n        const cityName = this.props.match.params.cityName;\n        let restaurantList = this.props.restaurants.map((data,index)=>{\n            const imageURL = get(data, \"restaurant.featured_image\");\n            const restaurant_Name = get(data, \"restaurant.name\");\n            const restaurant_Rating = get(data, \"restaurant.user_rating.aggregate_rating\");\n            const restaurant_Votes = get(data, \"restaurant.user_rating.votes\");\n            const restaurant_locality = get(data, \"restaurant.location.locality_verbose\");\n            const restaurant_address = get(data, \"restaurant.location.address\");\n            const restId = get(data, 'restaurant.R.res_id');\n            const restaurant_cuisine = get(data, \"restaurant.cuisines\");\n            if(!imageURL){\n                return null;\n            }\n            return (\n                <li key={index}>\n                    <Link to={`/details/${restId}`}>\n                        <img className='resto-image' src={imageURL}/>\n                        <div className='resto-details'>\n                            <h4 className='resto-name'>{restaurant_Name}</h4>\n                            <h5 className='resto-cuisine'>{restaurant_cuisine}</h5>\n                            <h4 className='locality'>{restaurant_locality}</h4>\n                            <address>{restaurant_address}</address>\n                            <div>\n                                <span className='resto-rating'>\n                                    <span className='star'><i class=\"fas fa-star\"></i></span>\n                                    {restaurant_Rating}\n                                </span>\n                                <span className='resto-votes'>({restaurant_Votes} votes)</span>\n                                {data.isLiked ? (\n                                    <button className='unlike-btn' onClick={(e) => this.unLikeHandler(e, restId)}> \n                                        <span className='filled-heart'>\n                                            <i className=\"fas fa-heart\"></i> Liked\n                                        </span> \n                                    </button>\n                                ): (\n                                    <button onClick={(e)=>this.likeHandler(e,restId)} className='like-btn'>\n                                        <span className=\"unfilled-heart\"><i className=\"far fa-heart\"></i></span>\n                                        Like\n                                    </button>     \n                                )}\n                           \n                            </div>\n                        </div>\n                        \n                        <div className='clear'></div>        \n                    </Link>    \n                </li>\n            )\n        });\n        return(\n            <div className='container'>\n                <h2 className='heading-title'>Showing restaurants in: <b>{cityName}</b></h2>\n                <ul className='resto-list'>\n                    {restaurantList}\n                </ul>\n                <div id=\"listMoreLoader\">\n                    <Loader/>\n                </div>\n            </div>\n        );\n    }\n}\nexport default withRouter(connect(mapStateToProps, mapDispatchToProp)(Listing))","import React from 'react';\nimport './Header.css';\nconst Header = ()=>{\n    return(\n        <header>\n            <a href=\"/\">\n              <h1 className='header-title'>\n                Restaurant\n                <span className='header-title-2'> Finder</span>\n             </h1>\n              <span className='header-icon'><i class=\"fas fa-cookie-bite\"></i></span>\n            </a>\n        </header>\n    )\n};\nexport default Header","import superagent from \"superagent\";\n\nconst mapDispatchToProp = dispatch =>({\n    getAllRestaurantReviews(id){\n        dispatch(function(dispatch){\n            superagent\n                .get(`https://developers.zomato.com/api/v2.1/reviews?res_id=${id}&count=10&start=20`)\n                .set(\"user-key\",'fa81a3f97323eba13d8713d3284b8556')\n                .then(res => {\n                    dispatch({\n                        type:'RESTAURANT_TOTAL_REVIEWS_FETCHED',\n                        data:res.body\n                    });\n                });\n        });\n    }\n})\nexport default mapDispatchToProp","import { get } from 'lodash';\nconst mapStateToProps= state => {\n    debugger;\n    return {\n        totalReviews: get(state.totalReviews, \"totalUser_reviews\"),\n        totalReview_count: state.totalReviews.totalReview_count,\n        totalReview_start: state.totalReviews.totalReview_start,\n        totalReview_shown: state.totalReviews.totalReview_shown,\n    };\n}\nexport default mapStateToProps","import React,{Component} from 'react';\nimport { connect } from 'react-redux';\nimport mapDispatchToProp from './mapDispatchToProps';\nimport mapStateToProps from './mapStateToProps';\nimport { get } from 'lodash';\nimport './Reviews.css';\nimport { withRouter} from 'react-router-dom';\nimport Loader from '../Loader/Loader';\n\nclass Reviews extends Component{\n    componentDidMount(){\n        const restId = this.props.match.params.restId;\n        this.props.getAllRestaurantReviews(parseInt(restId, 10))\n    }\n    render(){\n        if (this.props.totalReviews.length === 0) {\n            return <Loader/>\n        }\n        let allReviewData = this.props.totalReviews;\n        let reviewCount = this.props.totalReview_count;\n\n        let total_reviews = allReviewData.map((review,index)=>{\n            const user_image = get(review,\"review.user.profile_image\");\n            const user_name = get(review,\"review.user.name\");\n            const rating = get(review,\"review.rating\");\n            const review_text = get(review,\"review.review_text\");\n            const maxRating = 5;\n            const unfilledStar = maxRating - rating;\n            let arr = [];\n                for (var i = 0; i < rating; i++) {\n                    arr.push(<i className=\"fas fa-star\"></i>);\n                }\n                for(var i = 0; i<unfilledStar; i++){\n                    arr.push(<i className=\"far fa-star\"></i>);\n                }\n            return(\n                <li key={index}>\n                    <img className='user-image' src={user_image}/>\n                    <div className='reviews-info'>\n                        <h4 className='user-name'>{user_name}</h4>\n                        <span className='stars'>{arr}</span>\n                        <p className='review-text'>{review_text}</p>\n                    </div>\n                    \n                </li>\n            )\n        }) ;\n        return(\n            <div className='container'>\n                <div className='reviews'>\n                    <h4 className='head'>Ratings:</h4>\n                        <ul>\n                            {total_reviews}\n                        </ul>\n                </div>\n            </div>\n        )\n    }\n}\nexport default withRouter(connect(mapStateToProps, mapDispatchToProp)(Reviews))","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './Home/Home.js';\nimport Details from './Details/Details.js';\nimport Listing from './Listing/Listing.js';\nimport Header from './Header/Header.js'\nimport Reviews from './Reviews/Reviews.js'\n\nconst AppRouter = ()=>{\n    return(\n        <Router>\n            <div>\n                <div><Header/></div>\n                <Route path='/' exact component={Home}/>\n                <Route path='/listing/:cityName/:cityId' component={Listing}/>\n                <Route path='/details/:restId' component={Details}/>\n                <Route path='/Reviews/:restId' component={Reviews}/>\n            </div>\n            \n        </Router>\n    );\n    \n}\nexport default AppRouter","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport store from './Store/configStore.js';\nimport * as serviceWorker from './serviceWorker';\n// import Details from './Details/Details.js';\nimport AppRouter from './AppRouter.js'\n// import Listing from './Listing/Listing.js';\nimport './Resources/normalize.css';\n\nReactDOM.render(<Provider store={store}><AppRouter /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}